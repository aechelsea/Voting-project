/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VoteInterface extends ethers.utils.Interface {
  functions: {
    "candidateCount()": FunctionFragment;
    "candidateNames(uint256)": FunctionFragment;
    "candidates(uint256)": FunctionFragment;
    "chairperson()": FunctionFragment;
    "claimReward()": FunctionFragment;
    "getCandidateCount()": FunctionFragment;
    "getClaim()": FunctionFragment;
    "getReward()": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "timestamp()": FunctionFragment;
    "vote(uint256)": FunctionFragment;
    "voterReward()": FunctionFragment;
    "voters(address)": FunctionFragment;
    "winner()": FunctionFragment;
    "winnerVoteCount()": FunctionFragment;
    "winning()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "candidateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chairperson",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getClaim", values?: undefined): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "voterReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [string]): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "winnerVoteCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "winning", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "candidateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chairperson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voterReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winnerVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winning", data: BytesLike): Result;

  events: {};
}

export class Vote extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VoteInterface;

  functions: {
    candidateCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    candidateNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    candidates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

    chairperson(overrides?: CallOverrides): Promise<[string]>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCandidateCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      candidate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voterReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { voted: boolean; vote: BigNumber }>;

    winner(overrides?: CallOverrides): Promise<[string]>;

    winnerVoteCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    winning(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { winning_: BigNumber }>;
  };

  candidateCount(overrides?: CallOverrides): Promise<BigNumber>;

  candidateNames(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  candidates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

  chairperson(overrides?: CallOverrides): Promise<string>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCandidateCount(overrides?: CallOverrides): Promise<BigNumber>;

  getClaim(overrides?: CallOverrides): Promise<BigNumber>;

  getReward(overrides?: CallOverrides): Promise<BigNumber>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    candidate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voterReward(overrides?: CallOverrides): Promise<BigNumber>;

  voters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { voted: boolean; vote: BigNumber }>;

  winner(overrides?: CallOverrides): Promise<string>;

  winnerVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

  winning(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    candidateCount(overrides?: CallOverrides): Promise<BigNumber>;

    candidateNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    candidates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

    chairperson(overrides?: CallOverrides): Promise<string>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    getCandidateCount(overrides?: CallOverrides): Promise<BigNumber>;

    getClaim(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    vote(candidate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voterReward(overrides?: CallOverrides): Promise<BigNumber>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { voted: boolean; vote: BigNumber }>;

    winner(overrides?: CallOverrides): Promise<string>;

    winnerVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    winning(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    candidateCount(overrides?: CallOverrides): Promise<BigNumber>;

    candidateNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chairperson(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCandidateCount(overrides?: CallOverrides): Promise<BigNumber>;

    getClaim(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      candidate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voterReward(overrides?: CallOverrides): Promise<BigNumber>;

    voters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<BigNumber>;

    winnerVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    winning(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    candidateCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidateNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chairperson(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCandidateCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      candidate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voterReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winnerVoteCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winning(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
